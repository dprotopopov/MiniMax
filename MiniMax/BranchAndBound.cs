using System;
using System.Collections.Generic;
using MyLibrary.Trace;
using MyMath;

namespace MiniMax
{
    /// <summary>
    ///     Метод ветвей и границ
    ///     Общая идея метода может быть описана на примере поиска минимума функции f(x) на множестве допустимых значений
    ///     переменной x. Функция f и переменная x могут быть произвольной природы. Для метода ветвей и границ необходимы две
    ///     процедуры: ветвление и нахождение оценок (границ).
    ///     Процедура ветвления состоит в разбиении множества допустимых значений переменной x на подобласти (подмножества)
    ///     меньших размеров. Процедуру можно рекурсивно применять к подобластям. Полученные подобласти образуют дерево,
    ///     называемое деревом поиска или деревом ветвей и границ. Узлами этого дерева являются построенные подобласти
    ///     (подмножества множества значений переменной x).
    ///     Процедура нахождения оценок заключается в поиске верхних и нижних границ для решения задачи на подобласти
    ///     допустимых значений переменной x.
    ///     В основе метода ветвей и границ лежит следующая идея: если нижняя граница значений функции на подобласти A дерева
    ///     поиска больше, чем верхняя граница на какой-либо ранее просмотренной подобласти B, то A может быть исключена из
    ///     дальнейшего рассмотрения (правило отсева). Обычно минимальную из полученных верхних оценок записывают в глобальную
    ///     переменную m; любой узел дерева поиска, нижняя граница которого больше значения m, может быть исключен из
    ///     дальнейшего рассмотрения.
    ///     Если нижняя граница для узла дерева совпадает с верхней границей, то это значение является минимумом функции и
    ///     достигается на соответствующей подобласти.
    /// </summary>
    public class BranchAndBoundSolver<T> : ISolver<T>
    {
        public bool Execute(ILinearMiniMax<T> minimax, ref IEnumerable<Vector<T>> optimalVectors, ref IEnumerable<T> optimalValues, ITrace trace)
        {
            throw new NotImplementedException();
        }
    }
}